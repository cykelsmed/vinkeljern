#!/usr/bin/env python
"""
Wizard til Vinkeljernet

Dette script vejleder brugeren gennem processen med at v√¶lge parametre
og k√∏re vinkeljern med de rigtige argumenter.
"""

import os
import glob
import subprocess
from pathlib import Path

def clear_screen():
    """Ryd terminal-sk√¶rmen"""
    os.system('cls' if os.name == 'nt' else 'clear')

def print_header():
    """Udskriv header til wizarden"""
    print("\n" + "=" * 70)
    print("VINKELJERNET WIZARD".center(70))
    print("=" * 70 + "\n")

def get_available_profiles():
    """Hent alle tilg√¶ngelige profiler"""
    profiles = glob.glob("config/*.yaml")
    # Filter konfigurations-filer fra
    profiles = [p for p in profiles if "config.development" not in p 
                and "config.production" not in p 
                and "config.testing" not in p]
    return profiles

def select_profile(profiles):
    """Lad brugeren v√¶lge en profil fra listen"""
    print("\nüîç V√ÜLG PROFIL\n")
    
    # Vis alle profiler med numre
    for i, profile in enumerate(profiles, 1):
        # Fjern 'config/' og '.yaml' fra visningen for at g√∏re det mere l√¶sbart
        display_name = profile.replace("config/", "").replace(".yaml", "")
        print(f"  {i}. {display_name}")
    
    # Lad brugeren v√¶lge ved nummer
    while True:
        try:
            choice = input("\nV√¶lg profilnummer: ")
            idx = int(choice) - 1
            if 0 <= idx < len(profiles):
                return profiles[idx]
            print("Ugyldigt nummer, pr√∏v igen.")
        except ValueError:
            print("Indtast venligst et tal.")

def get_topic():
    """Lad brugeren indtaste et emne"""
    print("\nüìù INDTAST EMNE\n")
    
    while True:
        topic = input("Indtast dit emne (f.eks. 'klimaforandringer', 'kunstig intelligens'): ")
        if topic.strip():
            return topic
        print("Emne kan ikke v√¶re tomt, pr√∏v igen.")

def get_additional_options():
    """Lad brugeren v√¶lge ekstra indstillinger"""
    print("\n‚öôÔ∏è EKSTRA INDSTILLINGER\n")
    
    options = []
    
    # V√¶lg k√∏rselstilstand
    print("K√∏rselstilstand:")
    print("  1. Standard (kommandolinje) [ANBEFALET] - K√∏rer automatisk uden yderligere interaktion")
    print("  2. Interaktiv - Starter en interaktiv terminal med flere kommandoer")
    
    while True:
        mode_choice = input("\nV√¶lg k√∏rselstilstand (1/2) [Standard=1]: ")
        if mode_choice == "" or mode_choice == "1":
            # Standard tilstand - ingen flag tilf√∏jes
            break
        elif mode_choice == "2":
            # Interaktiv tilstand
            options.append("--interactive")
            break
        else:
            print("Ugyldigt valg, v√¶lg 1 eller 2.")
    
    # Mulighed for fulde kildedetaljer
    if input("\nVil du se fulde kildedetaljer? (j/n): ").lower().startswith('j'):
        options.append("--fulde-kilder")
    
    # Mulighed for at gemme output til fil
    if input("Vil du gemme resultatet til en fil? (j/n): ").lower().startswith('j'):
        file_format = "markdown"  # Standard
        format_choice = input("V√¶lg format (markdown, json, html) [standard: markdown]: ").lower()
        if format_choice in ["markdown", "json", "html"]:
            file_format = format_choice
        
        filename = input(f"Indtast filnavn [standard: resultat.{file_format}]: ")
        if not filename:
            filename = f"resultat.{file_format}"
        
        options.append(f"--output {filename}")
        options.append(f"--format {file_format}")
    
    # Mulighed for at ignorere cache
    if input("Vil du ignorere cache og hente frisk data? (j/n): ").lower().startswith('j'):
        options.append("--bypass-cache")
    
    # Mulighed for debug tilstand
    if input("Vil du aktivere debug tilstand? (j/n): ").lower().startswith('j'):
        options.append("--debug")
    
    return options

def build_and_run_command(profile_path, topic, options):
    """Byg den endelige kommando og k√∏r programmet"""
    print("\nüöÄ K√òRER VINKELJERNET\n")
    
    # Indstil PYTHONPATH for at sikre imports virker
    import sys
    sys.path.append('.')
    
    # Import n√∏dvendige komponenter direkte
    import asyncio
    from vinkeljernet.api_wrapper import initialize_api_client
    from vinkeljernet.redaktionel_dna import RedaktionelDNA
    from vinkeljernet.vinkelgenerator import generate_angles
    from vinkeljernet.ui_utils import display_angles_panels
    
    # Opret en object der indeholder alle de argumenter, vi skal bruge
    class Args:
        pass
    
    args = Args()
    args.emne = topic
    args.profil = profile_path
    args.output = None
    args.dev_mode = False
    args.bypass_cache = "--bypass-cache" in options
    args.format = "json"
    args.debug = "--debug" in options
    args.fulde_kilder = "--fulde-kilder" in options
    
    # For output fil
    for opt in options:
        if opt.startswith("--output "):
            args.output = opt.split(" ", 1)[1].strip()
        elif opt.startswith("--format "):
            args.format = opt.split(" ", 1)[1].strip()
    
    # Vis kommandoen (som hvis den blev k√∏rt fra terminalen)
    cmd_parts = [f"python main.py --emne \"{topic}\" --profil {profile_path}"]
    if options:
        cmd_parts.append(" ".join(options))
    print(f"Kommando der simuleres: {' '.join(cmd_parts)}\n")
    
    # K√∏r direkte vinkelgenerator uden at g√• gennem hovedmenuen
    print("Genererer vinkler - det kan tage et par minutter...\n")
    
    try:
        # K√∏r programmet
        async def run_generation():
            # Initialiser API klienten
            await initialize_api_client()
            
            # Indl√¶s profil og generer vinkler
            profile = RedaktionelDNA.from_yaml(profile_path)
            angles = await generate_angles(topic, profile, bypass_cache=args.bypass_cache)
            
            # Vis resultater
            print("\n[bold green]Viser genererede vinkler:[/bold green]")
            display_angles_panels(angles, verbose=args.fulde_kilder)
            
            # Gem til fil hvis angivet
            if args.output:
                from vinkeljernet.formatters import format_angles
                format_angles(
                    angles,
                    format_type=args.format,
                    profile_name=Path(args.profil).stem,
                    topic=args.emne,
                    output_path=args.output
                )
                print(f"\n‚úì Resultater gemt i {args.output} ({args.format} format)")
        
        # K√∏r asynkront
        asyncio.run(run_generation())
        
    except KeyboardInterrupt:
        print("\nAfbrudt af bruger")
    except Exception as e:
        print(f"\n‚ö†Ô∏è Fejl under k√∏rsel: {e}")
        if args.debug:
            import traceback
            traceback.print_exc()

def main():
    """Hovedfunktion der styrer wizard-flowet"""
    try:
        clear_screen()
        print_header()
        
        print("Denne wizard vil guide dig gennem ops√¶tningen af Vinkeljernet.")
        print("Du vil blive bedt om at v√¶lge en profil, indtaste et emne og v√¶lge")
        print("ekstra indstillinger, f√∏r programmet k√∏res.")
        
        # S√∏rg for at vi er i det rette milj√∏
        if not os.path.exists("main.py"):
            print("\n‚ö†Ô∏è FEJL: main.py blev ikke fundet i den aktuelle mappe.")
            print("S√∏rg for at k√∏re denne wizard fra projektets rodmappe.")
            return
        
        # Tjek om der er profiler tilg√¶ngelige
        profiles = get_available_profiles()
        if not profiles:
            print("\n‚ö†Ô∏è FEJL: Ingen profiler fundet i config/")
            return
        
        # V√¶lg profil
        profile_path = select_profile(profiles)
        
        # Indtast emne
        topic = get_topic()
        
        # V√¶lg ekstra indstillinger
        options = get_additional_options()
        
        # Bekr√¶ft k√∏rsel
        print("\n‚úÖ OPS√ÜTNING KOMPLET\n")
        print(f"Profil: {profile_path}")
        print(f"Emne: {topic}")
        print(f"Ekstra indstillinger: {' '.join(options) if options else 'Ingen'}")
        
        if input("\nKlar til at k√∏re Vinkeljernet? (j/n): ").lower().startswith('j'):
            build_and_run_command(profile_path, topic, options)
        else:
            print("\nAfbryder. Du kan starte wizard'en igen n√•r du er klar.")
    
    except KeyboardInterrupt:
        print("\n\nAfbrudt af bruger. Afslutter.")
    except Exception as e:
        print(f"\n‚ö†Ô∏è En uventet fejl opstod: {e}")

if __name__ == "__main__":
    main() 
"""
Data models for the Vinkeljernet application.

This module defines the data structures used for representing editorial DNA profiles,
news angles, and other application entities.
"""

from typing import Dict, List, Optional, Any, Union
from pydantic import BaseModel, Field, validator, field_validator


class RedaktionelDNA(BaseModel):
    """
    Model for representing an editorial DNA profile.
    
    This class validates that the profile contains all required fields
    and that they are of the correct type.
    """
    kerneprincipper: List[Dict[str, str]] = Field(
        ..., 
        description="Liste af kerneprincipper, hvor hvert princip er et dict med en nøgle (princippets navn) og en værdi (beskrivelse)"
    )
    tone_og_stil: str = Field(
        ..., 
        description="Beskrivelse af mediets tone og stil"
    )
    nyhedsprioritering: Dict[str, int] = Field(
        ..., 
        description="Mapping mellem nyhedskriterier og deres prioriteringer (vægte)"
    )
    fokusområder: List[str] = Field(
        ..., 
        description="Liste af emneområder, som mediet fokuserer på"
    )
    nogo_områder: List[str] = Field(
        ..., 
        description="Liste af emner og vinkler, som mediet vil undgå"
    )
    
    @field_validator('kerneprincipper')
    @classmethod
    def validate_kerneprincipper(cls, value):
        """Validate that each item in kerneprincipper is a dict with a single key-value pair."""
        if not isinstance(value, list):
            raise ValueError("Kerneprincipper skal være en liste")
        
        for item in value:
            if not isinstance(item, dict):
                raise ValueError(f"Hvert kerneprincip skal være et dictionary, fik {type(item)}")
            if len(item) != 1:
                raise ValueError(f"Hvert kerneprincip skal have præcis ét nøgle-værdi par, fik {len(item)}")
            
            key = list(item.keys())[0]
            if not isinstance(key, str):
                raise ValueError(f"Kerneprincipnøglen skal være en streng, fik {type(key)}")
            if not isinstance(item[key], str):
                raise ValueError(f"Kerneprincipværdien skal være en streng, fik {type(item[key])}")
        
        return value
    
    @validator('nyhedsprioritering')
    def validate_nyhedsprioritering(cls, value):
        """Validate that nyhedsprioritering has string keys and integer values."""
        if not all(isinstance(k, str) for k in value.keys()):
            raise ValueError("Alle nøgler i nyhedsprioritering skal være strenge")
        if not all(isinstance(v, int) for v in value.values()):
            raise ValueError("Alle værdier i nyhedsprioritering skal være heltal")
        return value


class VinkelForslag(BaseModel):
    """
    Model for representing a news angle suggestion.
    
    This standardizes the format for angles generated by the system.
    """
    overskrift: str = Field(
        ..., 
        description="Vinkelens overskrift/rubrik, kort og præcis"
    )
    beskrivelse: str = Field(
        ..., 
        description="Kort beskrivelse af vinklen, typisk 2-3 sætninger"
    )
    nyhedskriterier: List[str] = Field(
        ..., 
        description="Liste af nyhedskriterier, som vinklen rammer"
    )
    begrundelse: str = Field(
        ..., 
        description="Begrundelse for hvorfor vinklen passer til mediets profil"
    )
    startSpørgsmål: List[str] = Field(
        ..., 
        description="Liste af potentielle startspørgsmål til interviews"
    )
    flags: Optional[List[str]] = Field(
        default=None, 
        description="Valgfrie flag til at markere særlige egenskaber ved vinklen"
    )
    kriterieScore: Optional[float] = Field(
        default=None, 
        description="Beregnet score baseret på matchende nyhedskriterier"
    )
    
    @validator('overskrift')
    def validate_overskrift(cls, value):
        """Validate headline length."""
        if len(value) > 100:
            raise ValueError("Overskriften er for lang (maks. 100 tegn)")
        return value
    
    @validator('beskrivelse')
    def validate_beskrivelse(cls, value):
        """Validate description length."""
        if len(value) > 500:
            raise ValueError("Beskrivelsen er for lang (maks. 500 tegn)")
        return value
    
    @validator('nyhedskriterier')
    def validate_nyhedskriterier(cls, value):
        """Validate that nyhedskriterier is not empty."""
        if not value:
            raise ValueError("Der skal være mindst ét nyhedskriterium")
        return value
    
    class Config:
        """Configuration for the VinkelForslag model."""
        json_schema_extra = {
            "example": {
                "overskrift": "Klimaforandringer truer dansk landbrug: Hver tredje landmand frygter konkurs",
                "beskrivelse": "Nye tal viser, at danske landmænd i stigende grad bliver økonomisk presset af klimaforandringer. Tørke og oversvømmelser har reduceret udbyttet med gennemsnitligt 22% i 2023.",
                "nyhedskriterier": ["Væsentlighed", "Konflikt", "Aktualitet"],
                "begrundelse": "Vinklen kombinerer de folkelige konsekvenser med et aktuelt problem og rammer vores fokus på almindelige danskeres udfordringer.",
                "startSpørgsmål": [
                    "Hvordan har klimaforandringerne konkret påvirket din drift det seneste år?",
                    "Hvad mener du, politikerne bør gøre for at hjælpe landbruget gennem klimakrisen?"
                ],
                "flags": ["Kræver case", "Mulighed for grafik"],
                "kriterieScore": 7.5
            }
        }
"""
Data models for the Vinkeljernet application.

This module defines the data structures used for representing editorial DNA profiles,
news angles, and other application entities.
"""

from typing import Dict, List, Optional, Any, Union
from pydantic import BaseModel, Field, validator, field_validator
from datetime import date


class KeyStatistic(BaseModel):
    """
    Model for a key statistic in a knowledge distillate.
    """
    tal: str = Field(..., description="Den specifikke statistik eller tal")
    beskrivelse: str = Field(..., description="Beskrivelse af hvad tallet repræsenterer")
    kilde: Optional[str] = Field(default=None, description="Kilden til statistikken hvis angivet")


class KeyClaim(BaseModel):
    """
    Model for a key claim or fact in a knowledge distillate.
    """
    paastand: str = Field(..., description="Den centrale påstand eller faktum")
    kilde: Optional[str] = Field(default=None, description="Kilden til påstanden hvis angivet")


class Perspective(BaseModel):
    """
    Model for a perspective on a topic in a knowledge distillate.
    """
    vinkel: str = Field(..., description="Beskrivelse af perspektivet")
    aktør: Optional[str] = Field(default=None, description="Hvem der repræsenterer dette perspektiv")


class ImportantDate(BaseModel):
    """
    Model for an important date in a knowledge distillate.
    """
    dato: str = Field(
        ..., 
        description="Den specifikke dato (YYYY-MM-DD format eller beskrivelse hvis præcis dato ikke er kendt)"
    )
    begivenhed: str = Field(..., description="Hvad der skete på denne dato")
    betydning: Optional[str] = Field(
        default=None, 
        description="Kort beskrivelse af hvorfor denne dato er vigtig"
    )


class KnowledgeDistillate(BaseModel):
    """
    Model for a knowledge distillate that extracts and organizes the most relevant
    facts from background information about a topic.
    
    This model standardizes the structure of knowledge distillates generated by AI.
    """
    noegletal: List[KeyStatistic] = Field(
        default_factory=list,
        description="Liste med vigtige statistikker og tal relateret til emnet"
    )
    centralePaastand: List[KeyClaim] = Field(
        default_factory=list,
        description="Liste med centrale påstande og fakta om emnet"
    )
    vinkler: List[Perspective] = Field(
        default_factory=list,
        description="Liste med forskellige perspektiver på emnet"
    )
    datoer: List[ImportantDate] = Field(
        default_factory=list,
        description="Liste med vigtige datoer relateret til emnet"
    )
    
    class Config:
        """Configuration for the KnowledgeDistillate model."""
        json_schema_extra = {
            "example": {
                "noegletal": [
                    {
                        "tal": "22%",
                        "beskrivelse": "Reduktion i landbrugsudbytte i 2023 pga. klimaforandringer",
                        "kilde": "Danmarks Statistik"
                    }
                ],
                "centralePaastand": [
                    {
                        "paastand": "Klimaforandringer udgør en eksistentiel trussel for traditonelt dansk landbrug",
                        "kilde": "DTU Klimaforskningsrapport 2024"
                    }
                ],
                "vinkler": [
                    {
                        "vinkel": "Økonomiske konsekvenser for landmænd",
                        "aktør": "Landbrug & Fødevarer"
                    }
                ],
                "datoer": [
                    {
                        "dato": "2023-07-15",
                        "begivenhed": "Sommerens tørke slår rekord og ødelægger afgrøder",
                        "betydning": "Medførte krisepakke til landbruget på 1.2 milliarder kr."
                    }
                ]
            }
        }


class ExpertSource(BaseModel):
    """
    Model for an expert source that can be consulted for a specific news angle.
    """
    navn: str = Field(..., description="Ekspertens fulde navn")
    titel: str = Field(..., description="Ekspertens titel og rolle")
    organisation: str = Field(..., description="Arbejdsplads eller tilknytning")
    ekspertise: str = Field(..., description="Kort beskrivelse af relevant ekspertise")
    kontakt: Optional[str] = Field(
        default=None, 
        description="Kontaktinformation, hvis tilgængelig (email, telefon)"
    )
    relevans: Optional[str] = Field(
        default=None,
        description="Kort forklaring på hvorfor denne ekspert er relevant for vinklen"
    )
    
    @field_validator('navn')
    def validate_navn(cls, value):
        """Validate that name is not empty and looks like a real name."""
        if not value.strip():
            raise ValueError("Ekspertens navn må ikke være tomt")
        if len(value.split()) < 2:
            raise ValueError("Ekspertens navn skal indeholde både fornavn og efternavn")
        return value
    
    @field_validator('titel')
    def validate_titel(cls, value):
        """Validate that title is not empty."""
        if not value.strip():
            raise ValueError("Ekspertens titel må ikke være tom")
        return value
    
    class Config:
        """Configuration for the ExpertSource model."""
        json_schema_extra = {
            "example": {
                "navn": "Jens Hansen",
                "titel": "Professor i Klimaforandringer",
                "organisation": "Københavns Universitet, Institut for Miljø og Ressourcer",
                "ekspertise": "Klimaforandringers påvirkning på det nordiske landbrug",
                "kontakt": "jens.hansen@ku.dk",
                "relevans": "Har forsket i klimaforandringer og landbrug i over 15 år"
            }
        }


class Institution(BaseModel):
    """
    Model for an institution that can provide information or expertise on a topic.
    """
    navn: str = Field(..., description="Organisationens fulde navn")
    type: str = Field(..., description="Type af organisation (universitet, myndighed, NGO, etc.)")
    relevans: str = Field(..., description="Hvorfor denne organisation er relevant")
    kontaktperson: Optional[str] = Field(
        default="Presseafdeling", 
        description="Navngiven kontaktperson/presseansvarlig hvis kendt"
    )
    kontakt: Optional[str] = Field(
        default=None,
        description="Kontaktinformation til organisationen/presseafdelingen"
    )
    
    class Config:
        """Configuration for the Institution model."""
        json_schema_extra = {
            "example": {
                "navn": "Danmarks Meteorologiske Institut",
                "type": "Statslig myndighed",
                "relevans": "Kan levere data om ekstremvejr og klimaændringer i Danmark",
                "kontaktperson": "Kommunikationschef Lars Jensen",
                "kontakt": "presse@dmi.dk"
            }
        }


class DataSource(BaseModel):
    """
    Model for a data source that can provide information for a news story.
    """
    titel: str = Field(..., description="Titel på rapport, database eller datasæt")
    udgiver: str = Field(..., description="Organisation der har udgivet eller vedligeholder datakilden")
    beskrivelse: str = Field(..., description="Kort beskrivelse af hvilke data der findes her")
    link: Optional[str] = Field(default=None, description="Link til datakilden, hvis tilgængelig")
    senest_opdateret: Optional[str] = Field(
        default=None,
        description="Hvornår datakilden sidst blev opdateret (hvis kendt)"
    )
    
    class Config:
        """Configuration for the DataSource model."""
        json_schema_extra = {
            "example": {
                "titel": "Klimastatistik for Danmark 2024",
                "udgiver": "Danmarks Meteorologiske Institut",
                "beskrivelse": "Omfattende statistik over nedbør, temperaturer og ekstremvejr i Danmark",
                "link": "https://www.dmi.dk/klimastatistik-2024",
                "senest_opdateret": "2024-03-15"
            }
        }


class RedaktionelDNA(BaseModel):
    """
    Editorial DNA profile model.

    Fields:
      - navn: The name of the profile.
      - beskrivelse: A description of the profile.
      - kerneprincipper: List of core principles.
      - tone_og_stil: A plain string describing the tone and style.
                     NOTE: This field is a string and MUST NOT be treated as a dictionary.
      - nyhedsprioritering: A dictionary mapping news criteria to their priority weights.
      - fokusOmrader: List of focus areas.
      - noGoOmrader: List of no-go areas.
    """
    navn: str
    beskrivelse: str
    kerneprincipper: List[str]
    tone_og_stil: str  # This field is explicitly a string (not a dict)
    nyhedsprioritering: Dict[str, int]
    fokusOmrader: List[str]
    noGoOmrader: List[str] = []

    class Config:
        populate_by_name = True  # (For pydantic v2 compatibility)


class VinkelForslag(BaseModel):
    """
    Model for representing a news angle suggestion.
    
    This standardizes the format for angles generated by the system.
    """
    overskrift: str = Field(
        ..., 
        description="Vinkelens overskrift/rubrik, kort og præcis"
    )
    beskrivelse: str = Field(
        ..., 
        description="Kort beskrivelse af vinklen, typisk 2-3 sætninger"
    )
    nyhedskriterier: List[str] = Field(
        ..., 
        description="Liste af nyhedskriterier, som vinklen rammer"
    )
    begrundelse: str = Field(
        ..., 
        description="Begrundelse for hvorfor vinklen passer til mediets profil"
    )
    startSpørgsmål: List[str] = Field(
        ..., 
        description="Liste af potentielle startspørgsmål til interviews"
    )
    flags: Optional[List[str]] = Field(
        default=None, 
        description="Valgfrie flag til at markere særlige egenskaber ved vinklen"
    )
    kriterieScore: Optional[float] = Field(
        default=None, 
        description="Beregnet score baseret på matchende nyhedskriterier"
    )
    
    # Nye felter til videndistillat og ekspertkilder
    videnDistillat: Optional[KnowledgeDistillate] = Field(
        default=None,
        description="Destillat af den vigtigste viden fra baggrundsinformationen"
    )
    ekspertKilder: Optional[List[ExpertSource]] = Field(
        default=None,
        description="Liste med ekspertkilder specifikt relateret til denne vinkel"
    )
    institutioner: Optional[List[Institution]] = Field(
        default=None,
        description="Liste med relevante organisationer for denne vinkel"
    )
    datakilder: Optional[List[DataSource]] = Field(
        default=None,
        description="Liste med specifikke datakilder og rapporter relevante for vinklen"
    )
    harVidenDistillat: Optional[bool] = Field(
        default=False,
        description="Flag der indikerer om vinklen har et videndistillat tilknyttet"
    )
    harEkspertKilder: Optional[bool] = Field(
        default=False,
        description="Flag der indikerer om vinklen har ekspertkilder tilknyttet"
    )
    
    @field_validator('overskrift')
    def validate_overskrift(cls, value):
        """Validate headline length."""
        if len(value) > 100:
            raise ValueError("Overskriften er for lang (maks. 100 tegn)")
        return value
    
    @field_validator('beskrivelse')
    def validate_beskrivelse(cls, value):
        """Validate description length."""
        if len(value) > 500:
            raise ValueError("Beskrivelsen er for lang (maks. 500 tegn)")
        return value
    
    @field_validator('nyhedskriterier')
    def validate_nyhedskriterier(cls, value):
        """Validate that nyhedskriterier is not empty."""
        if not value:
            raise ValueError("Der skal være mindst ét nyhedskriterium")
        return value
    
    class Config:
        """Configuration for the VinkelForslag model."""
        json_schema_extra = {
            "example": {
                "overskrift": "Klimaforandringer truer dansk landbrug: Hver tredje landmand frygter konkurs",
                "beskrivelse": "Nye tal viser, at danske landmænd i stigende grad bliver økonomisk presset af klimaforandringer. Tørke og oversvømmelser har reduceret udbyttet med gennemsnitligt 22% i 2023.",
                "nyhedskriterier": ["Væsentlighed", "Konflikt", "Aktualitet"],
                "begrundelse": "Vinklen kombinerer de folkelige konsekvenser med et aktuelt problem og rammer vores fokus på almindelige danskeres udfordringer.",
                "startSpørgsmål": [
                    "Hvordan har klimaforandringerne konkret påvirket din drift det seneste år?",
                    "Hvad mener du, politikerne bør gøre for at hjælpe landbruget gennem klimakrisen?"
                ],
                "flags": ["Kræver case", "Mulighed for grafik"],
                "kriterieScore": 7.5,
                "harVidenDistillat": True,
                "harEkspertKilder": True
            }
        }